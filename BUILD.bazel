load("@bazel_skylib//rules:common_settings.bzl", "bool_flag")
load("@bazel_skylib//rules:expand_template.bzl", "expand_template")
load("@rules_cc//cc:defs.bzl", "cc_library")

package(
    default_visibility = ["//visibility:public"],
    # BSD/MIT-like license (for zlib)
    licenses = ["notice"],
)

# By default zlib-ng builds with the "ng" API and exposes `zlib-ng.h`.
# If your project depends on the older `zlib.h` header, add the flag
# `--@zlib-ng//:zlib-compat=True` to your .bazelrc or build invocation.
bool_flag(
    name = "zlib-compat",
    build_setting_default = False,
)

config_setting(
    name = "zlib-compat_enabled",
    flag_values = {":zlib-compat": "true"},
)

[
    genrule(
        # The input template is identical to the CMake output.
        name = "{}_h_gen".format(name),
        srcs = ["zlib_name_mangling.h.empty".format(name)],
        outs = ["{}.h".format(name)],
        cmd = "cp $(SRCS) $(OUTS)",
        visibility = ["//visibility:public"],
    )
    for name in [
        "zlib_name_mangling",
        "zlib_name_mangling-ng",
    ]
]

[
    expand_template(
        name = "{}_h_gen".format(name),
        out = "{}.h".format(name),
        substitutions = {"@ZLIB_SYMBOL_PREFIX@": ""},
        template = "{}.h.in".format(name),
        visibility = ["//visibility:public"],
    )
    for name in [
        "zconf",
        "zconf-ng",
        "zlib",
        "zlib-ng",
    ]
]

cc_library(
    name = "zlib-ng",
    srcs = [
        "adler32.c",
        "adler32_fold.c",
        "adler32_fold.h",
        "adler32_p.h",
        "arch/generic/chunk_permute_table.h",
        "chunkset.c",
        "chunkset_tpl.h",
        "compare256_rle.h",
        "compress.c",
        "cpu_features.c",
        "cpu_features.h",
        "crc32_braid.c",
        "crc32_braid_comb.c",
        "crc32_braid_comb_p.h",
        "crc32_braid_p.h",
        "crc32_braid_tbl.h",
        "crc32_fold.c",
        "crc32_fold.h",
        "deflate.c",
        "deflate.h",
        "deflate_fast.c",
        "deflate_huff.c",
        "deflate_medium.c",
        "deflate_p.h",
        "deflate_quick.c",
        "deflate_rle.c",
        "deflate_slow.c",
        "deflate_stored.c",
        "fallback_builtins.h",
        "functable.c",
        "functable.h",
        "infback.c",
        "inffast_tpl.h",
        "inffixed_tbl.h",
        "inflate.c",
        "inflate.h",
        "inflate_p.h",
        "inftrees.c",
        "inftrees.h",
        "insert_string.c",
        "insert_string_roll.c",
        "insert_string_tpl.h",
        "match_tpl.h",
        "slide_hash.c",
        "trees.c",
        "trees.h",
        "trees_emit.h",
        "trees_tbl.h",
        "uncompr.c",
        "zbuild.h",
        "zendian.h",
        "zutil.c",
        "zutil.h",
        "zutil_p.h",
    ] + select({
        "@platforms//cpu:x86_64": [
            "arch/x86/adler32_avx2.c",
            "arch/x86/adler32_avx2_p.h",
            "arch/x86/adler32_avx512.c",
            "arch/x86/adler32_avx512_p.h",
            "arch/x86/adler32_avx512_vnni.c",
            "arch/x86/adler32_sse42.c",
            "arch/x86/adler32_ssse3.c",
            "arch/x86/adler32_ssse3_p.h",
            "arch/x86/chunkset_avx2.c",
            "arch/x86/chunkset_sse2.c",
            "arch/x86/chunkset_ssse3.c",
            "arch/x86/compare256_avx2.c",
            "arch/x86/compare256_sse2.c",
            "arch/x86/crc32_fold_pclmulqdq_tpl.h",
            "arch/x86/crc32_fold_vpclmulqdq_tpl.h",
            "arch/x86/crc32_pclmulqdq.c",
            "arch/x86/crc32_pclmulqdq_tpl.h",
            "arch/x86/crc32_vpclmulqdq.c",
            "arch/x86/insert_string_sse42.c",
            "arch/x86/slide_hash_avx2.c",
            "arch/x86/slide_hash_sse2.c",
            "arch/x86/x86_features.c",
            "arch/x86/x86_features.h",
            "arch/x86/x86_intrins.h",
        ],
        "//conditions:default": [],
    }),
    hdrs = select({
        ":zlib-compat_enabled": [
            ":zconf_h_gen",
            ":zlib_h_gen",
            ":zlib_name_mangling_h_gen",
        ],
        "//conditions:default": [
            ":zconf-ng_h_gen",
            ":zlib-ng_h_gen",
            ":zlib_name_mangling-ng_h_gen",
        ],
    }),
    copts = [
        "-std=c11",

        # Standard feature configuration.
        "-DWITH_GZFILEOP",
        "-DWITH_OPTIM",
        "-DWITH_NEW_STRATEGIES",
    ] + select({
        ":zlib-compat_enabled": ["-DZLIB_COMPAT"],
        "//conditions:default": [],
    }) + select({
        "@platforms//cpu:x86_64": [
            "-D_LARGEFILE64_SOURCE=1",
            "-D__USE_LARGEFILE64",
            "-DX86_FEATURES",
            "-DX86_AVX2",
            "-mavx2",
            "-DX86_AVX512",
            "-mavx512f",
            "-mavx512dq",
            "-mavx512bw",
            "-mavx512vl",
            "-DHAVE_CASCADE_LAKE", # Applies to AMD and Intel CPUs.
            "-mtune=cascadelake",
            "-DX86_MASK_INTRIN",
            "-DX86_AVX512VNNI",
            "-mavx512vnni",
            "-DX86_SSE42",
            "-msse4.2",
            "-DX86_SSE2",
            "-msse2",
            "-DX86_SSSE3",
            "-mssse3",
            "-DX86_PCLMULQDQ_CRC",
            "-mpclmul",
            "-DX86_VPCLMULQDQ_CRC",
            "-mvpclmulqdq",
            "-DHAVE_CASCADE_LAKE",
        ],
        "//conditions:default": [],
    }) + select({
        "@platforms//os:linux": [
            "-DHAVE_ALIGNED_ALLOC",
            "-DHAVE_SYS_AUXV_H",
            "-DHAVE_UNISTD_H",
            "-DHAVE_POSIX_MEMALIGN",
        ],
        "//conditions:default": [],
    }) + [
        # We can expect any non-ancient compiler to support these.
        "-DHAVE_ATTRIBUTE_VISIBILITY_HIDDEN",
        "-DHAVE_ATTRIBUTE_VISIBILITY_INTERNAL",
        "-DHAVE_ATTRIBUTE_ALIGNED",
        "-DHAVE_BUILTIN_CTZ",
        "-DHAVE_BUILTIN_CTZLL",
    ],
    visibility = ["//visibility:public"],
)
